// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_excel.proto

package tx_excel

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxExcels struct {
	ConstantMap map[string]*ConstantItem `protobuf:"bytes,1,rep,name=constant_map,json=constantMap,proto3" json:"constant_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TxExcels) Reset()         { *m = TxExcels{} }
func (m *TxExcels) String() string { return proto.CompactTextString(m) }
func (*TxExcels) ProtoMessage()    {}
func (*TxExcels) Descriptor() ([]byte, []int) {
	return fileDescriptor_65c4f71ac2c369d6, []int{0}
}
func (m *TxExcels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxExcels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxExcels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxExcels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxExcels.Merge(m, src)
}
func (m *TxExcels) XXX_Size() int {
	return m.Size()
}
func (m *TxExcels) XXX_DiscardUnknown() {
	xxx_messageInfo_TxExcels.DiscardUnknown(m)
}

var xxx_messageInfo_TxExcels proto.InternalMessageInfo

func (m *TxExcels) GetConstantMap() map[string]*ConstantItem {
	if m != nil {
		return m.ConstantMap
	}
	return nil
}

type ConstantItem struct {
	Id       string     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Value    int32      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	VList    []int64    `protobuf:"varint,3,rep,packed,name=vList,proto3" json:"vList,omitempty"`
	V3List   []*V3Int32 `protobuf:"bytes,4,rep,name=v3List,proto3" json:"v3List,omitempty"`
	V3List64 []*V3Int64 `protobuf:"bytes,5,rep,name=v3List64,proto3" json:"v3List64,omitempty"`
	KvList32 []*Kvint32 `protobuf:"bytes,6,rep,name=kvList32,proto3" json:"kvList32,omitempty"`
}

func (m *ConstantItem) Reset()         { *m = ConstantItem{} }
func (m *ConstantItem) String() string { return proto.CompactTextString(m) }
func (*ConstantItem) ProtoMessage()    {}
func (*ConstantItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_65c4f71ac2c369d6, []int{1}
}
func (m *ConstantItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConstantItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConstantItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConstantItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstantItem.Merge(m, src)
}
func (m *ConstantItem) XXX_Size() int {
	return m.Size()
}
func (m *ConstantItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstantItem.DiscardUnknown(m)
}

var xxx_messageInfo_ConstantItem proto.InternalMessageInfo

func (m *ConstantItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConstantItem) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *ConstantItem) GetVList() []int64 {
	if m != nil {
		return m.VList
	}
	return nil
}

func (m *ConstantItem) GetV3List() []*V3Int32 {
	if m != nil {
		return m.V3List
	}
	return nil
}

func (m *ConstantItem) GetV3List64() []*V3Int64 {
	if m != nil {
		return m.V3List64
	}
	return nil
}

func (m *ConstantItem) GetKvList32() []*Kvint32 {
	if m != nil {
		return m.KvList32
	}
	return nil
}

func init() {
	proto.RegisterType((*TxExcels)(nil), "TX.tx_excels")
	proto.RegisterMapType((map[string]*ConstantItem)(nil), "TX.tx_excels.ConstantMapEntry")
	proto.RegisterType((*ConstantItem)(nil), "TX.constant_item")
}

func init() { proto.RegisterFile("tx_excel.proto", fileDescriptor_65c4f71ac2c369d6) }

var fileDescriptor_65c4f71ac2c369d6 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xa9, 0x88, 0x4f,
	0xad, 0x48, 0x4e, 0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x0a, 0x89, 0x90, 0x12,
	0x2e, 0xa9, 0x88, 0x4f, 0x4a, 0x2c, 0x4e, 0x45, 0x96, 0x50, 0x5a, 0xc8, 0xc8, 0xc5, 0x09, 0x53,
	0x5b, 0x2c, 0xe4, 0xc8, 0xc5, 0x93, 0x9c, 0x9f, 0x57, 0x5c, 0x92, 0x98, 0x57, 0x12, 0x9f, 0x9b,
	0x58, 0x20, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0x24, 0xa7, 0x17, 0x12, 0xa1, 0x07, 0x57, 0xa4,
	0xe7, 0x0c, 0x55, 0xe1, 0x9b, 0x58, 0xe0, 0x9a, 0x57, 0x52, 0x54, 0x19, 0xc4, 0x9d, 0x8c, 0x10,
	0x91, 0x0a, 0xe4, 0x12, 0x40, 0x57, 0x20, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62, 0x0a, 0xa9, 0x73, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x4a,
	0x30, 0x29, 0x30, 0x6a, 0x70, 0x1b, 0x09, 0x82, 0x6c, 0x80, 0xdb, 0x9c, 0x59, 0x92, 0x9a, 0x1b,
	0x04, 0x91, 0xb7, 0x62, 0xb2, 0x60, 0x54, 0x3a, 0xc4, 0xc8, 0xc5, 0x8b, 0x22, 0x29, 0xc4, 0xc7,
	0xc5, 0xe4, 0x99, 0x02, 0x35, 0x8f, 0xc9, 0x33, 0x45, 0x48, 0x04, 0xd9, 0x38, 0x56, 0xa8, 0x5e,
	0xb0, 0xa8, 0x4f, 0x66, 0x71, 0x89, 0x04, 0xb3, 0x02, 0xb3, 0x06, 0x73, 0x10, 0x84, 0x23, 0xa4,
	0xcc, 0xc5, 0x56, 0x66, 0x0c, 0x16, 0x66, 0x01, 0xfb, 0x8e, 0x1b, 0x64, 0x77, 0x99, 0x71, 0x66,
	0x5e, 0x89, 0xb1, 0x51, 0x10, 0x54, 0x4a, 0x48, 0x9d, 0x8b, 0x03, 0xc2, 0x32, 0x33, 0x91, 0x60,
	0x45, 0x53, 0x66, 0x66, 0x12, 0x04, 0x97, 0x04, 0x29, 0xcc, 0x06, 0x9b, 0x6b, 0x6c, 0x24, 0xc1,
	0x86, 0x50, 0x98, 0x5d, 0x06, 0x31, 0x0f, 0x2e, 0xe9, 0xa4, 0x72, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3,
	0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x5c, 0x7a, 0xd6, 0xb0, 0xc0, 0x0d, 0x60, 0x48, 0x62, 0x03, 0xc7,
	0x8b, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x79, 0xf5, 0xbc, 0x6c, 0xc2, 0x01, 0x00, 0x00,
}

func (m *TxExcels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxExcels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxExcels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConstantMap) > 0 {
		for k := range m.ConstantMap {
			v := m.ConstantMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTxExcel(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTxExcel(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTxExcel(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConstantItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConstantItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConstantItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KvList32) > 0 {
		for iNdEx := len(m.KvList32) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KvList32[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxExcel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.V3List64) > 0 {
		for iNdEx := len(m.V3List64) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.V3List64[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxExcel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.V3List) > 0 {
		for iNdEx := len(m.V3List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.V3List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxExcel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.VList) > 0 {
		dAtA3 := make([]byte, len(m.VList)*10)
		var j2 int
		for _, num1 := range m.VList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTxExcel(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != 0 {
		i = encodeVarintTxExcel(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTxExcel(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxExcel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxExcel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxExcels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConstantMap) > 0 {
		for k, v := range m.ConstantMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTxExcel(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTxExcel(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTxExcel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ConstantItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTxExcel(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTxExcel(uint64(m.Value))
	}
	if len(m.VList) > 0 {
		l = 0
		for _, e := range m.VList {
			l += sovTxExcel(uint64(e))
		}
		n += 1 + sovTxExcel(uint64(l)) + l
	}
	if len(m.V3List) > 0 {
		for _, e := range m.V3List {
			l = e.Size()
			n += 1 + l + sovTxExcel(uint64(l))
		}
	}
	if len(m.V3List64) > 0 {
		for _, e := range m.V3List64 {
			l = e.Size()
			n += 1 + l + sovTxExcel(uint64(l))
		}
	}
	if len(m.KvList32) > 0 {
		for _, e := range m.KvList32 {
			l = e.Size()
			n += 1 + l + sovTxExcel(uint64(l))
		}
	}
	return n
}

func sovTxExcel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxExcel(x uint64) (n int) {
	return sovTxExcel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxExcels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tx_excels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tx_excels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConstantMap == nil {
				m.ConstantMap = make(map[string]*ConstantItem)
			}
			var mapkey string
			var mapvalue *ConstantItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTxExcel
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTxExcel
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTxExcel
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTxExcel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ConstantItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTxExcel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTxExcel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConstantMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConstantItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: constant_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: constant_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxExcel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VList = append(m.VList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTxExcel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTxExcel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VList) == 0 {
					m.VList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VList = append(m.VList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V3List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V3List = append(m.V3List, &V3Int32{})
			if err := m.V3List[len(m.V3List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V3List64", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V3List64 = append(m.V3List64, &V3Int64{})
			if err := m.V3List64[len(m.V3List64)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvList32", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KvList32 = append(m.KvList32, &Kvint32{})
			if err := m.KvList32[len(m.KvList32)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxExcel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxExcel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxExcel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxExcel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxExcel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxExcel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxExcel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxExcel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxExcel = fmt.Errorf("proto: unexpected end of group")
)
