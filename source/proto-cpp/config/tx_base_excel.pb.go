// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_base_excel.proto

package tx_excel

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type V2Int32 struct {
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *V2Int32) Reset()         { *m = V2Int32{} }
func (m *V2Int32) String() string { return proto.CompactTextString(m) }
func (*V2Int32) ProtoMessage()    {}
func (*V2Int32) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{0}
}
func (m *V2Int32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2Int32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2Int32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2Int32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2Int32.Merge(m, src)
}
func (m *V2Int32) XXX_Size() int {
	return m.Size()
}
func (m *V2Int32) XXX_DiscardUnknown() {
	xxx_messageInfo_V2Int32.DiscardUnknown(m)
}

var xxx_messageInfo_V2Int32 proto.InternalMessageInfo

func (m *V2Int32) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V2Int32) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type V2Int64 struct {
	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *V2Int64) Reset()         { *m = V2Int64{} }
func (m *V2Int64) String() string { return proto.CompactTextString(m) }
func (*V2Int64) ProtoMessage()    {}
func (*V2Int64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{1}
}
func (m *V2Int64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2Int64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2Int64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2Int64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2Int64.Merge(m, src)
}
func (m *V2Int64) XXX_Size() int {
	return m.Size()
}
func (m *V2Int64) XXX_DiscardUnknown() {
	xxx_messageInfo_V2Int64.DiscardUnknown(m)
}

var xxx_messageInfo_V2Int64 proto.InternalMessageInfo

func (m *V2Int64) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V2Int64) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type V2Float struct {
	Fx float32 `protobuf:"fixed32,1,opt,name=fx,proto3" json:"fx,omitempty"`
	Fy float32 `protobuf:"fixed32,2,opt,name=fy,proto3" json:"fy,omitempty"`
}

func (m *V2Float) Reset()         { *m = V2Float{} }
func (m *V2Float) String() string { return proto.CompactTextString(m) }
func (*V2Float) ProtoMessage()    {}
func (*V2Float) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{2}
}
func (m *V2Float) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2Float) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2Float.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2Float) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2Float.Merge(m, src)
}
func (m *V2Float) XXX_Size() int {
	return m.Size()
}
func (m *V2Float) XXX_DiscardUnknown() {
	xxx_messageInfo_V2Float.DiscardUnknown(m)
}

var xxx_messageInfo_V2Float proto.InternalMessageInfo

func (m *V2Float) GetFx() float32 {
	if m != nil {
		return m.Fx
	}
	return 0
}

func (m *V2Float) GetFy() float32 {
	if m != nil {
		return m.Fy
	}
	return 0
}

type V2Ifloat struct {
	X  int32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Fy float32 `protobuf:"fixed32,2,opt,name=fy,proto3" json:"fy,omitempty"`
}

func (m *V2Ifloat) Reset()         { *m = V2Ifloat{} }
func (m *V2Ifloat) String() string { return proto.CompactTextString(m) }
func (*V2Ifloat) ProtoMessage()    {}
func (*V2Ifloat) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{3}
}
func (m *V2Ifloat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2Ifloat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2Ifloat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2Ifloat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2Ifloat.Merge(m, src)
}
func (m *V2Ifloat) XXX_Size() int {
	return m.Size()
}
func (m *V2Ifloat) XXX_DiscardUnknown() {
	xxx_messageInfo_V2Ifloat.DiscardUnknown(m)
}

var xxx_messageInfo_V2Ifloat proto.InternalMessageInfo

func (m *V2Ifloat) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V2Ifloat) GetFy() float32 {
	if m != nil {
		return m.Fy
	}
	return 0
}

type V3Int32 struct {
	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *V3Int32) Reset()         { *m = V3Int32{} }
func (m *V3Int32) String() string { return proto.CompactTextString(m) }
func (*V3Int32) ProtoMessage()    {}
func (*V3Int32) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{4}
}
func (m *V3Int32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V3Int32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V3Int32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V3Int32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Int32.Merge(m, src)
}
func (m *V3Int32) XXX_Size() int {
	return m.Size()
}
func (m *V3Int32) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Int32.DiscardUnknown(m)
}

var xxx_messageInfo_V3Int32 proto.InternalMessageInfo

func (m *V3Int32) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V3Int32) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *V3Int32) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type V3Int64 struct {
	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int64 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *V3Int64) Reset()         { *m = V3Int64{} }
func (m *V3Int64) String() string { return proto.CompactTextString(m) }
func (*V3Int64) ProtoMessage()    {}
func (*V3Int64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{5}
}
func (m *V3Int64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V3Int64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V3Int64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V3Int64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Int64.Merge(m, src)
}
func (m *V3Int64) XXX_Size() int {
	return m.Size()
}
func (m *V3Int64) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Int64.DiscardUnknown(m)
}

var xxx_messageInfo_V3Int64 proto.InternalMessageInfo

func (m *V3Int64) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V3Int64) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *V3Int64) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type V3Float struct {
	Fx float32 `protobuf:"fixed32,1,opt,name=fx,proto3" json:"fx,omitempty"`
	Fy float32 `protobuf:"fixed32,2,opt,name=fy,proto3" json:"fy,omitempty"`
	Fz float32 `protobuf:"fixed32,3,opt,name=fz,proto3" json:"fz,omitempty"`
}

func (m *V3Float) Reset()         { *m = V3Float{} }
func (m *V3Float) String() string { return proto.CompactTextString(m) }
func (*V3Float) ProtoMessage()    {}
func (*V3Float) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{6}
}
func (m *V3Float) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V3Float) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V3Float.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V3Float) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Float.Merge(m, src)
}
func (m *V3Float) XXX_Size() int {
	return m.Size()
}
func (m *V3Float) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Float.DiscardUnknown(m)
}

var xxx_messageInfo_V3Float proto.InternalMessageInfo

func (m *V3Float) GetFx() float32 {
	if m != nil {
		return m.Fx
	}
	return 0
}

func (m *V3Float) GetFy() float32 {
	if m != nil {
		return m.Fy
	}
	return 0
}

func (m *V3Float) GetFz() float32 {
	if m != nil {
		return m.Fz
	}
	return 0
}

type V3Ifloat struct {
	X  int32   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Fy float32 `protobuf:"fixed32,2,opt,name=fy,proto3" json:"fy,omitempty"`
	Fz float32 `protobuf:"fixed32,3,opt,name=fz,proto3" json:"fz,omitempty"`
}

func (m *V3Ifloat) Reset()         { *m = V3Ifloat{} }
func (m *V3Ifloat) String() string { return proto.CompactTextString(m) }
func (*V3Ifloat) ProtoMessage()    {}
func (*V3Ifloat) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{7}
}
func (m *V3Ifloat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V3Ifloat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V3Ifloat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V3Ifloat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Ifloat.Merge(m, src)
}
func (m *V3Ifloat) XXX_Size() int {
	return m.Size()
}
func (m *V3Ifloat) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Ifloat.DiscardUnknown(m)
}

var xxx_messageInfo_V3Ifloat proto.InternalMessageInfo

func (m *V3Ifloat) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *V3Ifloat) GetFy() float32 {
	if m != nil {
		return m.Fy
	}
	return 0
}

func (m *V3Ifloat) GetFz() float32 {
	if m != nil {
		return m.Fz
	}
	return 0
}

type K2Int32 struct {
	Key int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	X   int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y   int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *K2Int32) Reset()         { *m = K2Int32{} }
func (m *K2Int32) String() string { return proto.CompactTextString(m) }
func (*K2Int32) ProtoMessage()    {}
func (*K2Int32) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{8}
}
func (m *K2Int32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K2Int32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K2Int32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K2Int32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K2Int32.Merge(m, src)
}
func (m *K2Int32) XXX_Size() int {
	return m.Size()
}
func (m *K2Int32) XXX_DiscardUnknown() {
	xxx_messageInfo_K2Int32.DiscardUnknown(m)
}

var xxx_messageInfo_K2Int32 proto.InternalMessageInfo

func (m *K2Int32) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *K2Int32) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *K2Int32) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type K2Int64 struct {
	Key int64 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	X   int64 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y   int64 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *K2Int64) Reset()         { *m = K2Int64{} }
func (m *K2Int64) String() string { return proto.CompactTextString(m) }
func (*K2Int64) ProtoMessage()    {}
func (*K2Int64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{9}
}
func (m *K2Int64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K2Int64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K2Int64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K2Int64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K2Int64.Merge(m, src)
}
func (m *K2Int64) XXX_Size() int {
	return m.Size()
}
func (m *K2Int64) XXX_DiscardUnknown() {
	xxx_messageInfo_K2Int64.DiscardUnknown(m)
}

var xxx_messageInfo_K2Int64 proto.InternalMessageInfo

func (m *K2Int64) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *K2Int64) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *K2Int64) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type K3Int32 struct {
	Key int32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	X   int32 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y   int32 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Z   int32 `protobuf:"varint,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *K3Int32) Reset()         { *m = K3Int32{} }
func (m *K3Int32) String() string { return proto.CompactTextString(m) }
func (*K3Int32) ProtoMessage()    {}
func (*K3Int32) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{10}
}
func (m *K3Int32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K3Int32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K3Int32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K3Int32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K3Int32.Merge(m, src)
}
func (m *K3Int32) XXX_Size() int {
	return m.Size()
}
func (m *K3Int32) XXX_DiscardUnknown() {
	xxx_messageInfo_K3Int32.DiscardUnknown(m)
}

var xxx_messageInfo_K3Int32 proto.InternalMessageInfo

func (m *K3Int32) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *K3Int32) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *K3Int32) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *K3Int32) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type K3Int64 struct {
	Key int64 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	X   int64 `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y   int64 `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
	Z   int64 `protobuf:"varint,4,opt,name=z,proto3" json:"z,omitempty"`
}

func (m *K3Int64) Reset()         { *m = K3Int64{} }
func (m *K3Int64) String() string { return proto.CompactTextString(m) }
func (*K3Int64) ProtoMessage()    {}
func (*K3Int64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{11}
}
func (m *K3Int64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *K3Int64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_K3Int64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *K3Int64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_K3Int64.Merge(m, src)
}
func (m *K3Int64) XXX_Size() int {
	return m.Size()
}
func (m *K3Int64) XXX_DiscardUnknown() {
	xxx_messageInfo_K3Int64.DiscardUnknown(m)
}

var xxx_messageInfo_K3Int64 proto.InternalMessageInfo

func (m *K3Int64) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *K3Int64) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *K3Int64) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *K3Int64) GetZ() int64 {
	if m != nil {
		return m.Z
	}
	return 0
}

type Turntime struct {
	Turn   int64 `protobuf:"varint,1,opt,name=turn,proto3" json:"turn,omitempty"`
	Show   int64 `protobuf:"varint,2,opt,name=show,proto3" json:"show,omitempty"`
	Begin  int64 `protobuf:"varint,3,opt,name=begin,proto3" json:"begin,omitempty"`
	End    int64 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Reward int64 `protobuf:"varint,5,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (m *Turntime) Reset()         { *m = Turntime{} }
func (m *Turntime) String() string { return proto.CompactTextString(m) }
func (*Turntime) ProtoMessage()    {}
func (*Turntime) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{12}
}
func (m *Turntime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Turntime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Turntime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Turntime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Turntime.Merge(m, src)
}
func (m *Turntime) XXX_Size() int {
	return m.Size()
}
func (m *Turntime) XXX_DiscardUnknown() {
	xxx_messageInfo_Turntime.DiscardUnknown(m)
}

var xxx_messageInfo_Turntime proto.InternalMessageInfo

func (m *Turntime) GetTurn() int64 {
	if m != nil {
		return m.Turn
	}
	return 0
}

func (m *Turntime) GetShow() int64 {
	if m != nil {
		return m.Show
	}
	return 0
}

func (m *Turntime) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *Turntime) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Turntime) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

type Kvint32 struct {
	Key   int32   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	VList []int32 `protobuf:"varint,2,rep,packed,name=vList,proto3" json:"vList,omitempty"`
}

func (m *Kvint32) Reset()         { *m = Kvint32{} }
func (m *Kvint32) String() string { return proto.CompactTextString(m) }
func (*Kvint32) ProtoMessage()    {}
func (*Kvint32) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{13}
}
func (m *Kvint32) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kvint32) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kvint32.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kvint32) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kvint32.Merge(m, src)
}
func (m *Kvint32) XXX_Size() int {
	return m.Size()
}
func (m *Kvint32) XXX_DiscardUnknown() {
	xxx_messageInfo_Kvint32.DiscardUnknown(m)
}

var xxx_messageInfo_Kvint32 proto.InternalMessageInfo

func (m *Kvint32) GetKey() int32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Kvint32) GetVList() []int32 {
	if m != nil {
		return m.VList
	}
	return nil
}

type Kvint64 struct {
	Key   int64   `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	VList []int64 `protobuf:"varint,2,rep,packed,name=vList,proto3" json:"vList,omitempty"`
}

func (m *Kvint64) Reset()         { *m = Kvint64{} }
func (m *Kvint64) String() string { return proto.CompactTextString(m) }
func (*Kvint64) ProtoMessage()    {}
func (*Kvint64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{14}
}
func (m *Kvint64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kvint64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kvint64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kvint64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kvint64.Merge(m, src)
}
func (m *Kvint64) XXX_Size() int {
	return m.Size()
}
func (m *Kvint64) XXX_DiscardUnknown() {
	xxx_messageInfo_Kvint64.DiscardUnknown(m)
}

var xxx_messageInfo_Kvint64 proto.InternalMessageInfo

func (m *Kvint64) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Kvint64) GetVList() []int64 {
	if m != nil {
		return m.VList
	}
	return nil
}

type Kvint32List struct {
	VList []*Kvint32 `protobuf:"bytes,1,rep,name=vList,proto3" json:"vList,omitempty"`
}

func (m *Kvint32List) Reset()         { *m = Kvint32List{} }
func (m *Kvint32List) String() string { return proto.CompactTextString(m) }
func (*Kvint32List) ProtoMessage()    {}
func (*Kvint32List) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{15}
}
func (m *Kvint32List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kvint32List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kvint32List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kvint32List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kvint32List.Merge(m, src)
}
func (m *Kvint32List) XXX_Size() int {
	return m.Size()
}
func (m *Kvint32List) XXX_DiscardUnknown() {
	xxx_messageInfo_Kvint32List.DiscardUnknown(m)
}

var xxx_messageInfo_Kvint32List proto.InternalMessageInfo

func (m *Kvint32List) GetVList() []*Kvint32 {
	if m != nil {
		return m.VList
	}
	return nil
}

type Kvint64List struct {
	VList []*Kvint64 `protobuf:"bytes,1,rep,name=vList,proto3" json:"vList,omitempty"`
}

func (m *Kvint64List) Reset()         { *m = Kvint64List{} }
func (m *Kvint64List) String() string { return proto.CompactTextString(m) }
func (*Kvint64List) ProtoMessage()    {}
func (*Kvint64List) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{16}
}
func (m *Kvint64List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Kvint64List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Kvint64List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Kvint64List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Kvint64List.Merge(m, src)
}
func (m *Kvint64List) XXX_Size() int {
	return m.Size()
}
func (m *Kvint64List) XXX_DiscardUnknown() {
	xxx_messageInfo_Kvint64List.DiscardUnknown(m)
}

var xxx_messageInfo_Kvint64List proto.InternalMessageInfo

func (m *Kvint64List) GetVList() []*Kvint64 {
	if m != nil {
		return m.VList
	}
	return nil
}

type V2Istring struct {
	Key int64  `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Str string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
}

func (m *V2Istring) Reset()         { *m = V2Istring{} }
func (m *V2Istring) String() string { return proto.CompactTextString(m) }
func (*V2Istring) ProtoMessage()    {}
func (*V2Istring) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{17}
}
func (m *V2Istring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V2Istring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V2Istring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V2Istring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V2Istring.Merge(m, src)
}
func (m *V2Istring) XXX_Size() int {
	return m.Size()
}
func (m *V2Istring) XXX_DiscardUnknown() {
	xxx_messageInfo_V2Istring.DiscardUnknown(m)
}

var xxx_messageInfo_V2Istring proto.InternalMessageInfo

func (m *V2Istring) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *V2Istring) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

type Ksvint64 struct {
	Key   string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	VList []int64 `protobuf:"varint,2,rep,packed,name=vList,proto3" json:"vList,omitempty"`
}

func (m *Ksvint64) Reset()         { *m = Ksvint64{} }
func (m *Ksvint64) String() string { return proto.CompactTextString(m) }
func (*Ksvint64) ProtoMessage()    {}
func (*Ksvint64) Descriptor() ([]byte, []int) {
	return fileDescriptor_c35d8061bdbe6b13, []int{18}
}
func (m *Ksvint64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ksvint64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ksvint64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ksvint64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ksvint64.Merge(m, src)
}
func (m *Ksvint64) XXX_Size() int {
	return m.Size()
}
func (m *Ksvint64) XXX_DiscardUnknown() {
	xxx_messageInfo_Ksvint64.DiscardUnknown(m)
}

var xxx_messageInfo_Ksvint64 proto.InternalMessageInfo

func (m *Ksvint64) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Ksvint64) GetVList() []int64 {
	if m != nil {
		return m.VList
	}
	return nil
}

func init() {
	proto.RegisterType((*V2Int32)(nil), "TX.v2int32")
	proto.RegisterType((*V2Int64)(nil), "TX.v2int64")
	proto.RegisterType((*V2Float)(nil), "TX.v2float")
	proto.RegisterType((*V2Ifloat)(nil), "TX.v2ifloat")
	proto.RegisterType((*V3Int32)(nil), "TX.v3int32")
	proto.RegisterType((*V3Int64)(nil), "TX.v3int64")
	proto.RegisterType((*V3Float)(nil), "TX.v3float")
	proto.RegisterType((*V3Ifloat)(nil), "TX.v3ifloat")
	proto.RegisterType((*K2Int32)(nil), "TX.k2int32")
	proto.RegisterType((*K2Int64)(nil), "TX.k2int64")
	proto.RegisterType((*K3Int32)(nil), "TX.k3int32")
	proto.RegisterType((*K3Int64)(nil), "TX.k3int64")
	proto.RegisterType((*Turntime)(nil), "TX.turntime")
	proto.RegisterType((*Kvint32)(nil), "TX.kvint32")
	proto.RegisterType((*Kvint64)(nil), "TX.kvint64")
	proto.RegisterType((*Kvint32List)(nil), "TX.kvint32list")
	proto.RegisterType((*Kvint64List)(nil), "TX.kvint64list")
	proto.RegisterType((*V2Istring)(nil), "TX.v2istring")
	proto.RegisterType((*Ksvint64)(nil), "TX.ksvint64")
}

func init() { proto.RegisterFile("tx_base_excel.proto", fileDescriptor_c35d8061bdbe6b13) }

var fileDescriptor_c35d8061bdbe6b13 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x4f, 0x8f, 0x93, 0x40,
	0x18, 0xc6, 0x3b, 0xcc, 0xb2, 0xd0, 0xb7, 0xc6, 0x6c, 0xc6, 0x8d, 0xe1, 0x44, 0x2a, 0xd1, 0x04,
	0x2f, 0xa8, 0x40, 0x50, 0xe3, 0xcd, 0xc4, 0x9b, 0x27, 0xb2, 0x87, 0x8d, 0x97, 0x4d, 0xeb, 0x4e,
	0xd7, 0x09, 0x15, 0x0c, 0x8c, 0x2c, 0xf4, 0x53, 0xf8, 0xb1, 0x3c, 0xee, 0xd1, 0xa3, 0x69, 0xbf,
	0x88, 0x99, 0x3f, 0xb4, 0xd2, 0xd6, 0x5a, 0xbd, 0xbd, 0x0f, 0x3c, 0xbf, 0x67, 0xde, 0xf7, 0x9d,
	0x64, 0xe0, 0x01, 0x6f, 0xae, 0xa6, 0x93, 0x8a, 0x5e, 0xd1, 0xe6, 0x23, 0x9d, 0x07, 0x5f, 0xca,
	0x82, 0x17, 0xc4, 0xb8, 0xb8, 0xf4, 0x9e, 0x80, 0x55, 0x87, 0x2c, 0xe7, 0x51, 0x48, 0xee, 0x01,
	0x6a, 0x1c, 0x34, 0x46, 0xbe, 0x99, 0xa2, 0x46, 0xa8, 0xd6, 0x31, 0x94, 0x6a, 0xd7, 0xb6, 0x24,
	0xde, 0xd8, 0x70, 0xcf, 0x86, 0x85, 0xed, 0xa9, 0xb0, 0xcd, 0xe6, 0xc5, 0x84, 0x93, 0xfb, 0x60,
	0xcc, 0x94, 0xcf, 0x48, 0x8d, 0x59, 0x23, 0xb5, 0x72, 0x0a, 0xdd, 0x7a, 0x3e, 0xd8, 0x75, 0xc8,
	0x94, 0xb7, 0x7f, 0xf2, 0xb6, 0x33, 0x02, 0xab, 0x8e, 0xfe, 0xda, 0xa2, 0x50, 0x0b, 0x07, 0x2b,
	0xb5, 0x58, 0x43, 0x87, 0x1b, 0xde, 0x40, 0x58, 0x40, 0xaf, 0x05, 0x74, 0x54, 0xfb, 0x52, 0x2b,
	0x52, 0xe8, 0x85, 0xf7, 0x0a, 0xec, 0x3a, 0x3a, 0x66, 0x9c, 0x1d, 0xf2, 0x25, 0x58, 0x99, 0xbe,
	0x81, 0x33, 0xc0, 0x19, 0x6d, 0x35, 0x2a, 0x4a, 0x15, 0x65, 0xf4, 0x06, 0xc6, 0xdd, 0x9d, 0x74,
	0x60, 0x12, 0xff, 0x0e, 0xe2, 0x2d, 0x10, 0xf7, 0x40, 0x79, 0x4b, 0xef, 0xc0, 0xca, 0xa2, 0xff,
	0x38, 0x51, 0x6d, 0xeb, 0xa4, 0x5b, 0x71, 0x17, 0xf3, 0xaf, 0xe7, 0x6f, 0x62, 0xe4, 0xd2, 0x4b,
	0xb0, 0xf9, 0xd7, 0x32, 0xe7, 0xec, 0x33, 0x25, 0x04, 0x4e, 0x44, 0xad, 0x83, 0x64, 0x2d, 0xbe,
	0x55, 0x9f, 0x8a, 0x5b, 0x1d, 0x26, 0x6b, 0x72, 0x0e, 0xe6, 0x94, 0xde, 0xb0, 0x5c, 0x67, 0x2a,
	0x21, 0xba, 0xa0, 0xf9, 0xb5, 0x4e, 0x16, 0x25, 0x79, 0x08, 0xa7, 0x25, 0xbd, 0x9d, 0x94, 0xd7,
	0x8e, 0x29, 0x3f, 0x6a, 0xe5, 0xbd, 0x00, 0x2b, 0xab, 0xff, 0xb4, 0x81, 0x73, 0x30, 0xeb, 0xf7,
	0xac, 0xe2, 0x8e, 0x31, 0xc6, 0xbe, 0x99, 0x2a, 0xb1, 0x46, 0xf6, 0x4e, 0xdb, 0x43, 0x70, 0x87,
	0x3c, 0x87, 0x91, 0x3e, 0x65, 0xce, 0x2a, 0x4e, 0x1e, 0x75, 0x26, 0x34, 0xc6, 0xfe, 0x28, 0x1c,
	0x05, 0x17, 0x97, 0x81, 0xfe, 0xbf, 0x4d, 0x24, 0xf1, 0x61, 0x22, 0x89, 0x3b, 0xe2, 0x19, 0x0c,
	0xeb, 0x90, 0x55, 0xbc, 0x64, 0xf9, 0xcd, 0x9e, 0xc6, 0xce, 0x00, 0x57, 0xbc, 0x94, 0xbb, 0x1b,
	0xa6, 0xa2, 0xf4, 0x42, 0xb0, 0xb3, 0x6a, 0x77, 0x90, 0xe1, 0x81, 0x41, 0xde, 0x3e, 0xfe, 0xbe,
	0x74, 0xd1, 0xdd, 0xd2, 0x45, 0x3f, 0x97, 0x2e, 0xfa, 0xb6, 0x72, 0x07, 0x77, 0x2b, 0x77, 0xf0,
	0x63, 0xe5, 0x0e, 0x3e, 0x40, 0xf0, 0x86, 0x37, 0xea, 0x51, 0x99, 0x9e, 0xca, 0x57, 0x25, 0xfa,
	0x15, 0x00, 0x00, 0xff, 0xff, 0xad, 0xe7, 0xc0, 0x87, 0x6c, 0x04, 0x00, 0x00,
}

func (m *V2Int32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *V2Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2Int64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2Int64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *V2Float) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fy))))
		i--
		dAtA[i] = 0x15
	}
	if m.Fx != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fx))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *V2Ifloat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2Ifloat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2Ifloat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fy))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *V3Int32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V3Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V3Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Z != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Z))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *V3Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V3Int64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V3Int64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Z != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Z))
		i--
		dAtA[i] = 0x18
	}
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *V3Float) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V3Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V3Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fz != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fz))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Fy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fy))))
		i--
		dAtA[i] = 0x15
	}
	if m.Fx != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fx))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *V3Ifloat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V3Ifloat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V3Ifloat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fz != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fz))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Fy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Fy))))
		i--
		dAtA[i] = 0x15
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *K2Int32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K2Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K2Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x18
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *K2Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K2Int64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K2Int64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x18
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *K3Int32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K3Int32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K3Int32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Z != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Z))
		i--
		dAtA[i] = 0x20
	}
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x18
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *K3Int64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *K3Int64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *K3Int64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Z != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Z))
		i--
		dAtA[i] = 0x20
	}
	if m.Y != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x18
	}
	if m.X != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x10
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Turntime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Turntime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Turntime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reward != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Reward))
		i--
		dAtA[i] = 0x28
	}
	if m.End != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x20
	}
	if m.Begin != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Begin))
		i--
		dAtA[i] = 0x18
	}
	if m.Show != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Show))
		i--
		dAtA[i] = 0x10
	}
	if m.Turn != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Turn))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Kvint32) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kvint32) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kvint32) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VList) > 0 {
		dAtA2 := make([]byte, len(m.VList)*10)
		var j1 int
		for _, num1 := range m.VList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Kvint64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kvint64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kvint64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VList) > 0 {
		dAtA4 := make([]byte, len(m.VList)*10)
		var j3 int
		for _, num1 := range m.VList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Kvint32List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kvint32List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kvint32List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VList) > 0 {
		for iNdEx := len(m.VList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxBaseExcel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Kvint64List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Kvint64List) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Kvint64List) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VList) > 0 {
		for iNdEx := len(m.VList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxBaseExcel(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *V2Istring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V2Istring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V2Istring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0x12
	}
	if m.Key != 0 {
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(m.Key))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ksvint64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ksvint64) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ksvint64) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VList) > 0 {
		dAtA6 := make([]byte, len(m.VList)*10)
		var j5 int
		for _, num1 := range m.VList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTxBaseExcel(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxBaseExcel(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxBaseExcel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *V2Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	return n
}

func (m *V2Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	return n
}

func (m *V2Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fx != 0 {
		n += 5
	}
	if m.Fy != 0 {
		n += 5
	}
	return n
}

func (m *V2Ifloat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Fy != 0 {
		n += 5
	}
	return n
}

func (m *V3Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Z))
	}
	return n
}

func (m *V3Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Z))
	}
	return n
}

func (m *V3Float) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fx != 0 {
		n += 5
	}
	if m.Fy != 0 {
		n += 5
	}
	if m.Fz != 0 {
		n += 5
	}
	return n
}

func (m *V3Ifloat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Fy != 0 {
		n += 5
	}
	if m.Fz != 0 {
		n += 5
	}
	return n
}

func (m *K2Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	return n
}

func (m *K2Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	return n
}

func (m *K3Int32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Z))
	}
	return n
}

func (m *K3Int64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if m.X != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Y))
	}
	if m.Z != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Z))
	}
	return n
}

func (m *Turntime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Turn != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Turn))
	}
	if m.Show != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Show))
	}
	if m.Begin != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.End))
	}
	if m.Reward != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Reward))
	}
	return n
}

func (m *Kvint32) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if len(m.VList) > 0 {
		l = 0
		for _, e := range m.VList {
			l += sovTxBaseExcel(uint64(e))
		}
		n += 1 + sovTxBaseExcel(uint64(l)) + l
	}
	return n
}

func (m *Kvint64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	if len(m.VList) > 0 {
		l = 0
		for _, e := range m.VList {
			l += sovTxBaseExcel(uint64(e))
		}
		n += 1 + sovTxBaseExcel(uint64(l)) + l
	}
	return n
}

func (m *Kvint32List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VList) > 0 {
		for _, e := range m.VList {
			l = e.Size()
			n += 1 + l + sovTxBaseExcel(uint64(l))
		}
	}
	return n
}

func (m *Kvint64List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VList) > 0 {
		for _, e := range m.VList {
			l = e.Size()
			n += 1 + l + sovTxBaseExcel(uint64(l))
		}
	}
	return n
}

func (m *V2Istring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovTxBaseExcel(uint64(m.Key))
	}
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovTxBaseExcel(uint64(l))
	}
	return n
}

func (m *Ksvint64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTxBaseExcel(uint64(l))
	}
	if len(m.VList) > 0 {
		l = 0
		for _, e := range m.VList {
			l += sovTxBaseExcel(uint64(e))
		}
		n += 1 + sovTxBaseExcel(uint64(l)) + l
	}
	return n
}

func sovTxBaseExcel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxBaseExcel(x uint64) (n int) {
	return sovTxBaseExcel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *V2Int32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v2int32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v2int32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v2int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v2int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2Float) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v2float: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v2float: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fx = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fy = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2Ifloat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v2ifloat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v2ifloat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fy = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V3Int32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v3int32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v3int32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V3Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v3int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v3int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V3Float) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v3float: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v3float: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fx", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fx = float32(math.Float32frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fy = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fz = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V3Ifloat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v3ifloat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v3ifloat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fy = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fz", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Fz = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K2Int32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: k2int32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: k2int32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K2Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: k2int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: k2int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K3Int32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: k3int32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: k3int32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *K3Int64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: k3int64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: k3int64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Z", wireType)
			}
			m.Z = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Z |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Turntime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: turntime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: turntime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turn", wireType)
			}
			m.Turn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Turn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			m.Show = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Show |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Begin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kvint32) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvint32: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvint32: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VList = append(m.VList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VList) == 0 {
					m.VList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxBaseExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VList = append(m.VList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kvint64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvint64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvint64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VList = append(m.VList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VList) == 0 {
					m.VList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxBaseExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VList = append(m.VList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kvint32List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvint32list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvint32list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VList = append(m.VList, &Kvint32{})
			if err := m.VList[len(m.VList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Kvint64List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kvint64list: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kvint64list: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VList = append(m.VList, &Kvint64{})
			if err := m.VList[len(m.VList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *V2Istring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v2istring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v2istring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ksvint64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ksvint64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ksvint64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VList = append(m.VList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTxBaseExcel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTxBaseExcel
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VList) == 0 {
					m.VList = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTxBaseExcel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VList = append(m.VList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxBaseExcel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTxBaseExcel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxBaseExcel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxBaseExcel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxBaseExcel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxBaseExcel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxBaseExcel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxBaseExcel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxBaseExcel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxBaseExcel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxBaseExcel = fmt.Errorf("proto: unexpected end of group")
)
