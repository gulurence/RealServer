package redis_template

var RedisMapTStr = `// Code generated by TX.
// Template: Redis DB Map Dao

package {{.RedisPackage}}
{{ if .RedisImports }}
import (
{{- range .RedisImports}}
    {{.}}
{{- end}}
){{end}}

//{{.TableName}}RedisKey gen{{.TableName}}Key 
func {{.TableName}}RedisKey({{.GormFieldsInputs}}) string {
    return {{.GormFieldsRedisKey}}
}
{{- $structName := CamelizeStr .TableName .SystemName}}{{$hasField := .HasFields}}
///////////////////////{{.TableName}}/////////////////////////////////////////////////////

func Get{{.TableName}}All({{.GormFieldsInputs}}) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    _client := {{.RedisClient}}
    strList, err := _client.HGetAll(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}})).Result()
    if err != nil {
        return nil, err
    }
    for _, str := range strList {
        info := {{.PoolPackage}}.Get{{$structName}}()
        if err = xjson.Unmarshal([]byte(str), info.Get{{.TableName}}()); err == nil {
            list = append(list, info)
        } else {
            {{.PoolPackage}}.Put{{$structName}}(info)
            xl.SErrorf("Get{{.TableName}}All Error, Unmarshal String:%s, Error:%s", str, err.Error())
        }
    }
    return list, err
}

func Del{{.TableName}}All({{.GormFieldsInputs}}) error {
    _client := {{.RedisClient}}
    return _client.Del(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}})).Err()
}

func Expire{{.TableName}}All({{- if $hasField}}{{.GormFieldsInputs}}, {{end}}expiration time.Duration) error {
    _client := {{.RedisClient}}
    return _client.Expire(_client.Context(), {{.TableName}}RedisKey({{- if $hasField}}{{.GormFieldsValue}}{{end}}), expiration).Err()
}

func Del{{.TableName}}(info *{{.TypePackage}}.{{$structName}}) error {
    _client := {{.RedisClient}}
    return _client.HDel(_client.Context(), {{.TableName}}RedisKey({{- if $hasField}}{{.GormGetFields "info"}}{{end}}), xutil.NumToString(info.Get{{.PrimaryKey.Name}}())).Err()
}

func Set{{.TableName}}(info *{{.TypePackage}}.{{$structName}}) error {
    _client := {{.RedisClient}}
    return _client.HSet(_client.Context(), {{.TableName}}RedisKey({{- if $hasField}}{{.GormGetFields "info"}}{{end}}), xutil.NumToString(info.Get{{.PrimaryKey.Name}}()), xjson.MarshalString(info.Get{{.TableName}}())).Err()
}

func Get{{.TableName}}({{- if $hasField}}{{.GormFieldsInputs}}, {{end}}{{.PrimaryKey.Name}} {{.PrimaryKey.GoType}}) (info *{{.TypePackage}}.{{$structName}}, err error) {
    _client := {{.RedisClient}}
    str, err := _client.HGet(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}}), xutil.NumToString({{.PrimaryKey.Name}})).Result()
    if err == nil {
        info = {{.PoolPackage}}.Get{{$structName}}()
        if err = xjson.Unmarshal([]byte(str), info.Get{{.TableName}}()); err == nil {
            return info, nil
        }
        {{.PoolPackage}}.Put{{$structName}}(info)
    }
    return nil, err
}

func Set{{.TableName}}List({{- if $hasField}}{{.GormFieldsInputs}}, {{end}}infos []*{{.TypePackage}}.{{$structName}}) error {
    if len(infos) <= 0 {
        return errors.New("Set{{.TableName}}List len error")
    }
    _client := {{.RedisClient}}
    var _list []string
    for _, _info := range infos {
        _list = append(_list, xutil.NumToString(_info.Get{{.PrimaryKey.Name}}()))
        _list = append(_list, xjson.MarshalString(_info.Get{{.TableName}}()))
    }
    return _client.HMSet(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}}), _list).Err()
}

func Get{{.TableName}}List({{- if $hasField}}{{.GormFieldsInputs}}, {{end}}{{.PrimaryKey.Name}}s []int64) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    _list := make([]string, len({{.PrimaryKey.Name}}s))
    for i, id := range {{.PrimaryKey.Name}}s {
        _list[i] = xutil.NumToString(id)
    }
    _client := {{.RedisClient}}
    strList, err := _client.HMGet(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}}), _list...).Result()
    if err != nil {
        return nil, err
    }
    for _, str := range strList {
        if str == nil {
            continue
        }
        info := {{.PoolPackage}}.Get{{$structName}}()
        if err = xjson.Unmarshal([]byte(str.(string)), info.Get{{.TableName}}()); err == nil {
            list = append(list, info)
        } else {
            {{.PoolPackage}}.Put{{$structName}}(info)
            xl.SErrorf("Get{{.TableName}}List Error, Unmarshal String:%s, Error:%s", str, err.Error())
        }
    }
    return list, err
}

func Del{{.TableName}}List({{- if $hasField}}{{.GormFieldsInputs}}, {{end}}{{.PrimaryKey.Name}}s []{{.PrimaryKey.GoType}}) (int64, error) {
    _list := make([]string, len({{.PrimaryKey.Name}}s))
    for i, id := range {{.PrimaryKey.Name}}s {
        _list[i] = xutil.NumToString(id)
    }
    _client := {{.RedisClient}}
    return _client.HDel(_client.Context(), {{.TableName}}RedisKey({{.GormFieldsValue}}), _list...).Result()
}
`
