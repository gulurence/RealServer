package logic

var logicListTemplateStr = `// Code generated by TX.
// Template: List logic

package {{.LogicPackage}}
{{ if .LogicImports }}
import (
{{- range .LogicImports}}
    {{.}}
{{- end}}
){{end}}
{{$structName := CamelizeStr .TableName .SystemName}}{{$lowerName := LowerLeftWord .TableName}}
type {{$structName}}LLogic struct {
{{ if .IsOnlyPlayer }}    {{.SystemName}}LogicBase{{end}}{{ if .IsOnlyAccount }}   AccountId int64{{end}}
    {{$structName}}List map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}}
}
{{ if .IsOnlyPlayer }}
func New{{$structName}}LLogic(playerId int64, sharedId int) *{{$structName}}LLogic {
    return &{{$structName}}LLogic{
        {{.SystemName}}LogicBase: {{.SystemName}}LogicBase{
            PlayerId: playerId,
            SharedId: sharedId,
            IsInit:   false,
        },
    }
}{{end}}
{{ if .IsOnlyAccount }}
func New{{$structName}}LLogic(accountId int64) *{{$structName}}LLogic {
    return &{{$structName}}LLogic{
        AccountId: accountId,
    }
}{{end}}

func (logic *{{$structName}}LLogic) {{$structName}}LLogicMap() map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}} {
    if logic.IsInit == false {
        logic.{{$structName}}List = make(map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}})
        list, err := {{.DaoPackage}}.Query{{.TableName}}List(logic.PlayerId)
        if err != nil {
            xl.SError(err.Error())
            return nil
        }
        logic.IsInit = true

        for i := range list {
            logic.{{$structName}}List[list[i].{{.PrimaryKey.Name}}] = (&{{.TypePackage}}.{{$structName}}{}).Fill{{.TableName}}(list[i])
        }
    }

    return logic.{{$structName}}List
}

func (logic *{{$structName}}LLogic) OnDestroy() {
   _ = logic.Update{{$structName}}Map()
    if logic.{{$structName}}List == nil {
        return
    }
    for _, _info := range logic.{{$structName}}List {
        if _info != nil {
            {{.PoolPackage}}.Put{{$structName}}(_info)
        }
    }
    logic.{{$lowerName}}List = nil
}

func (logic *{{$structName}}LLogic) Create{{$structName}}({{$lowerName}} *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
    if logic.{{$structName}}LLogicMap() == nil {
        return nil, errors.New("{{$structName}}LLogic {{$structName}}LLogicMap() is nil")
    }
{{ if .PrimaryKey.IsAutoIncrement }}
    {{$lowerName}}, err := {{.DaoPackage}}.Create{{.TableName}}({{$lowerName}})
    if err != nil {
        return nil, err
    }
    {{$lowerName}}.ClearDirtyFlag()
{{end}}
    logic.{{$structName}}List[{{$lowerName}}.Get{{.PrimaryKey.Name}}()] = {{$lowerName}}
    return {{$lowerName}}, nil
}

func (logic *{{$structName}}LLogic) Get{{$structName}}(id {{.PrimaryKey.GoType}}) *{{.TypePackage}}.{{$structName}} {
    if logic.{{$structName}}LLogicMap() == nil {
        return nil
    }
    return logic.{{$structName}}List[id]
}

func (logic *{{$structName}}LLogic) Update{{$structName}}Map() error {
	if logic.{{$structName}}LLogicMap() == nil {
		return nil
	}
	var dList []{{.PrimaryKey.GoType}}
	var iList []*{{.TypePackage}}.{{$structName}}
	for i := range logic.{{$structName}}List {
		_info := logic.{{$structName}}List[i]
		if _info.DeleteDirty {
			dList = append(dList, _info.Get{{.PrimaryKey.Name}}())
		} else if _info.HasDirtyFlag({{.PrimaryKey.ColumnIndex}})) {
			iList = append(iList, _info)
		} else if _info.DirtyFlags > 0 {
			if err := {{.DaoPackage}}.Update{{.TableName}}(_info); err != nil {
				xl.SErrorf("Update{{$structName}} UpdateList Error:%s", err.Error())
				return err
			}
			_info.ClearDirtyFlag()
		}
	}

	if err := {{.DaoPackage}}.Delete{{.TableName}}List(dList); err != nil {
		xl.SErrorf("Update{{$structName}} DeleteList Error:%s", err.Error())
		return err
	}
	for i := range dList {
        _info := logic.{{$structName}}List[i]
        if _info != nil {
            {{.PoolPackage}}.Put{{$structName}}(_info)
        }
		delete(logic.{{$structName}}List, dList[i])
	}
	if err := {{.DaoPackage}}.Create{{.TableName}}List(iList); err != nil {
		xl.SErrorf("Update{{$structName}} InsertList Error:%s", err.Error())
	}
	for i := range iList {
		if _info := logic.{{$structName}}List[iList[i].Get{{.PrimaryKey.Name}}()]; _info != nil {
			_info.ClearDirtyFlag()
		}
	}
	return nil
}
`
