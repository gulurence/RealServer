package logic

var logicMapTemplateStr = `// Code generated by TX.
// Template: Map logic

package {{.LogicPackage}}
{{ if .LogicImports }}
import (
{{- range .LogicImports}}
    {{.}}
{{- end}}
){{end}}
{{$structName := CamelizeStr .TableName .SystemName}}{{$lowerName := LowerLeftWord .TableName}}{{$hasField := .HasFields}}
{{- $redisCache := .RedisCache}}{{$redisCacheTime := .RedisCacheTime}}
type {{$structName}}MLogic struct {
{{- if $hasField}}{{- range .GormFields}}
    {{.FieldName}}  {{.FieldType}}
{{- end}}{{- end}}
    {{.SystemName}}LogicBase
    {{$lowerName}}Map map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}}
    {{- if .HasNextField }}
    LastDBId {{.PrimaryKey.GoType}}
    {{- end}}
}

func New{{$structName}}MLogic({{- if $hasField}}{{- range .GormFields}}{{.FieldValue}} {{.FieldType}}, {{end}}{{end}}dbId int) *{{$structName}}MLogic {
    return &{{$structName}}MLogic{
{{- if $hasField}}{{- range .GormFields}}
        {{.FieldName}}:  {{.FieldValue}},
{{- end}}{{- end}}
        {{.SystemName}}LogicBase: {{.SystemName}}LogicBase{
            DBId:       dbId,
            IsInit:     false,
            UpdateMaps: make(map[int64]int64),
        },
    }
}

func (logic *{{$structName}}MLogic) {{$structName}}Map() map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}} {
    if logic.IsInit == false {
        logic.{{$lowerName}}Map = make(map[{{.PrimaryKey.GoType}}]*{{.TypePackage}}.{{$structName}})
{{- if $redisCache }}
        if list, err := {{.RedisPackage}}.Get{{.TableName}}All({{.GormFieldsStr "logic"}}); err == nil && len(list) > 0  {
            for _, info := range list {
                info.BindDBLogic(logic)
                logic.{{$lowerName}}Map[info.Get{{.PrimaryKey.Name}}()] = info
            }
            _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
            logic.IsInit = true
            return logic.{{$lowerName}}Map
        }
{{- end}}
        list, err := {{.DaoPackage}}.Query{{.TableName}}All(logic.DBId{{- range .GormFields}}{{- if $hasField}}, logic.{{.FieldName}}{{end}}{{- end }})        
        if err != nil {
            xl.SErrorf("Query{{.TableName}}All Error:%s", err.Error())
            return nil
        }
        logic.IsInit = true
        for _, info := range list {
            info.BindDBLogic(logic)
            logic.{{$lowerName}}Map[info.Get{{.PrimaryKey.Name}}()] = info
{{- if .HasNextField }}
            if info.Get{{.PrimaryKey.Name}}() > logic.LastDBId {
                logic.LastDBId = info.Get{{.PrimaryKey.Name}}() 
            }
{{- end }}
        }
{{- if $redisCache }}
        _ = {{.RedisPackage}}.Set{{.TableName}}List({{.GormFieldsStr "logic"}}, list)
        _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
    }
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
    return logic.{{$lowerName}}Map
}

func (logic *{{$structName}}MLogic) OnDestroy() {
    _ = logic.Update{{$structName}}Map()
    if logic.{{$lowerName}}Map == nil {
        return
    }
    for _, _info := range logic.{{$lowerName}}Map {
        if _info != nil {
            {{.PoolPackage}}.Put{{$structName}}(_info)
        }
    }
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
    logic.{{$lowerName}}Map = nil
}
{{if $redisCache }}
func (logic *{{$structName}}MLogic) CleanRedisInfo() {
    _ = {{.RedisPackage}}.Del{{.TableName}}All({{.GormFieldsStr "logic"}})
}{{- end}}

func (logic *{{$structName}}MLogic) Create{{$structName}}({{$lowerName}} *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
    if logic.{{$structName}}Map() == nil {
        return nil, errors.New("{{$structName}}MLogic {{$structName}}Map() is nil")
    }    
{{ if .PrimaryKey.IsAutoIncrement }}
    {{$lowerName}}, err := {{.DaoPackage}}.Create{{.TableName}}(logic.DBId, {{$lowerName}})
    if err != nil {
        return nil, err
    }
    {{$lowerName}}.ClearDirtyFlag()
{{end}}
    {{$lowerName}}.BindDBLogic(logic)
    logic.{{$lowerName}}Map[{{$lowerName}}.Get{{.PrimaryKey.Name}}()] = {{$lowerName}}
    logic.UpdateMaps[int64({{$lowerName}}.Get{{.PrimaryKey.Name}}())] = 1
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Set{{.TableName}}({{$lowerName}})
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
{{if .HasNextField }}
        if {{$lowerName}}.Get{{.PrimaryKey.Name}}() > logic.LastDBId {
            logic.LastDBId = {{$lowerName}}.Get{{.PrimaryKey.Name}}() 
        }
{{- end }}
    return {{$lowerName}}, nil
}

func (logic *{{$structName}}MLogic) Create{{$structName}}List(list []*{{.TypePackage}}.{{$structName}}) ([]*{{.TypePackage}}.{{$structName}}, error) {
    if logic.{{$structName}}Map() == nil {
        return nil, errors.New("{{$structName}}MLogic {{$structName}}Map() is nil")
    }
{{ if .PrimaryKey.IsAutoIncrement }}
    if err := {{.DaoPackage}}.Create{{.TableName}}List(logic.DBId, list); err != nil {
        return nil, err
    }
    for _, info := range list {
        logic.{{$lowerName}}Map[info.Get{{.PrimaryKey.Name}}()] = info
        info.ClearDirtyFlag()

        info.BindDBLogic(logic)
        logic.UpdateMaps[int64(info.Get{{.PrimaryKey.Name}}())] = 1

{{if .HasNextField }}
        if info.Get{{.PrimaryKey.Name}}() > logic.LastDBId {
            logic.LastDBId = info.Get{{.PrimaryKey.Name}}() 
        }
{{- end }}
    }
{{- else}}
    for _, info := range list {
        info.BindDBLogic(logic)
        logic.{{$lowerName}}Map[info.Get{{.PrimaryKey.Name}}()] = info
        logic.UpdateMaps[int64(info.Get{{.PrimaryKey.Name}}())] = 1

{{if .HasNextField }}
        if info.Get{{.PrimaryKey.Name}}() > logic.LastDBId {
            logic.LastDBId = info.Get{{.PrimaryKey.Name}}()
        }
{{- end }}
    }
{{- end}}
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Set{{.TableName}}List({{.GormFieldsStr "logic"}}, list)
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
    return list, nil
}

func (logic *{{$structName}}MLogic) Get{{$structName}}(id {{.PrimaryKey.GoType}}) *{{.TypePackage}}.{{$structName}} {
    if logic.{{$structName}}Map() == nil {
        return nil
    }
    return logic.{{$lowerName}}Map[id]
}

func (logic *{{$structName}}MLogic) Delete{{$structName}}(id {{.PrimaryKey.GoType}}) *{{.TypePackage}}.{{$structName}} {
    if logic.{{$structName}}Map() == nil {
        return nil
    }
    info := logic.{{$lowerName}}Map[id]
    if info != nil {
        info.SetDeleteDirty(true)
    }
    return info
}

func (logic *{{$structName}}MLogic) Update{{$structName}}(id {{.PrimaryKey.GoType}}) error {
 	if logic.{{$structName}}Map() == nil {
		return nil
	}
    _info := logic.Get{{$structName}}(id)
    if _info == nil {
        return errors.New("Can't Found the ID:" + xutil.NumToString(id) + " from maps.")
    }
    if _info.DirtyFlags < 0 {
        if err := {{.DaoPackage}}.Delete{{.TableName}}(logic.DBId, _info); err != nil {
			xl.SErrorf("Delete{{$structName}} Info:%v, Error:%s", _info, err.Error())
			return err
		}
{{- if $redisCache }}
        _ = {{.RedisPackage}}.Del{{.TableName}}(_info)
{{- end}}
        {{.PoolPackage}}.Put{{$structName}}(_info)
        delete(logic.{{$lowerName}}Map, id)
        delete(logic.UpdateMaps, int64(id))
        return nil
    } else if _info.HasDirtyFlag({{.PrimaryKey.ColumnIndex}}) {
        if _, err := {{.DaoPackage}}.Create{{.TableName}}(logic.DBId, _info); err != nil {
		    xl.SErrorf("Update{{$structName}} InsertList Error:%s", err.Error())
	    }
{{- if $redisCache }}
        _ = {{.RedisPackage}}.Set{{.TableName}}(_info)
{{- end}}
    } else if _info.DirtyFlags > 0 {
        if err := {{.DaoPackage}}.Update{{.TableName}}(logic.DBId, _info); err != nil {
			xl.SErrorf("Update{{$structName}} UpdateMaps Error:%s", err.Error())
			return err
		}
{{- if $redisCache }}
        _ = {{.RedisPackage}}.Set{{.TableName}}(_info)
{{- end}}
	}
    _info.ClearDirtyFlag()
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
    return nil
}

func (logic *{{$structName}}MLogic) Update{{$structName}}Map() error {
	if logic.IsInit == false || logic.{{$structName}}Map() == nil {
		return nil
	}
	var dList []{{.PrimaryKey.GoType}}
	var iList []*{{.TypePackage}}.{{$structName}}
	for i := range logic.UpdateMaps {
		_info := logic.{{$lowerName}}Map[{{.UpdateCast "i"}}]
        if _info == nil {
            continue
        }
		if _info.DirtyFlags < 0 {
            dList = append(dList, _info.Get{{.PrimaryKey.Name}}())            
		} else if _info.HasDirtyFlag({{.PrimaryKey.ColumnIndex}}) {
			iList = append(iList, _info)
			_info.ClearDirtyFlag()
		} else if _info.DirtyFlags > 0 {
            if err := {{.DaoPackage}}.Update{{.TableName}}(logic.DBId, _info); err != nil {
				xl.SErrorf("Update{{$structName}} UpdateMaps Error:%s", err.Error())
				return err
			}
{{- if $redisCache }}
            _ = {{.RedisPackage}}.Set{{.TableName}}(_info)
{{- end}}
			_info.ClearDirtyFlag()
		}
	}

    if len(dList) >0 {
        _ = {{.DaoPackage}}.Delete{{.TableName}}List({{- if $hasField}}{{- range .GormFields}}logic.{{.FieldName}}, {{end}}{{end}}logic.DBId, dList)
	    for i := range dList {
            _info := logic.{{$lowerName}}Map[dList[i]]
            if _info != nil {
                {{.PoolPackage}}.Put{{$structName}}(_info)
            }
		    delete(logic.{{$lowerName}}Map, dList[i])
            delete(logic.UpdateMaps, int64(dList[i]))
	    }
{{- if $redisCache }}
        _, _ = {{.RedisPackage}}.Del{{.TableName}}List({{.GormFieldsStr "logic"}}, dList)
{{- end}}
    }

    if len(iList) > 0 {
        if err := {{.DaoPackage}}.Create{{.TableName}}List(logic.DBId, iList); err != nil {
		    xl.SErrorf("Update{{$structName}} InsertList Error:%s", err.Error())
	    }
{{- if $redisCache }}
         _ = {{.RedisPackage}}.Set{{.TableName}}List({{.GormFieldsStr "logic"}}, iList)
{{- end}}
    }
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Expire{{.TableName}}All({{.GormFieldsStr "logic"}}, {{$redisCacheTime}})
{{- end}}
	return nil
}

{{- range .NextFields}}

func (logic *{{$structName}}MLogic) Query{{$structName}}NextList({{.Name}} {{.GoType}}) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    if list, err = {{.DaoPackage}}.Query{{.TableName}}NextList({{- if $hasField}}{{- range .GormFields}}logic.{{.FieldName}},  {{end}}{{end}}logic.DBId, logic.LastDBId); list != nil {
        for i := range list {
            logic.{{$lowerName}}Map[list[i].Get{{.PrimaryKey.Name}}()] = list[i]
            if list[i].Get{{.PrimaryKey.Name}}() > logic.LastDBId {
                logic.LastDBId = list[i].Get{{.PrimaryKey.Name}}() 
            }
        }
    }
    list = []*{{.TypePackage}}.{{$structName}}{}
    for i, info := range logic.{{$lowerName}}Map {
        if i > {{.Name}} {
            list = append(list, info)
        }
    }
    return list, err
}

func (logic *{{$structName}}MLogic) Query{{$structName}}NextLimitList({{.Name}} {{.GoType}}, limit int) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    if list, err = {{.DaoPackage}}.Query{{.TableName}}NextLimitList({{- if $hasField}}{{- range .GormFields}}logic.{{.FieldName}},  {{end}}{{end}}logic.DBId, logic.LastDBId, limit); list != nil {
        for i := range list {
            logic.{{$lowerName}}Map[list[i].Get{{.PrimaryKey.Name}}()] = list[i]
            if list[i].Get{{.PrimaryKey.Name}}() > logic.LastDBId {
                logic.LastDBId = list[i].Get{{.PrimaryKey.Name}}() 
            }
        }
    }
    list = []*{{.TypePackage}}.{{$structName}}{}
    for i, info := range logic.{{$lowerName}}Map {
        if i > {{.Name}} {
            list = append(list, info)
        }
    }    
    
    return list, err
}
{{- end}}

{{- range .LikeFields}}

func (logic *{{$structName}}MLogic) Query{{.TableName}}LikeList(dbId int, {{.Name}} {{.GoType}}, limit int) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    return {{.DaoPackage}}.Query{{.TableName}}LikeList(dbId, {{.Name}}, limit)
}

func (logic *{{$structName}}MLogic) Query{{.TableName}}LikeNextList(dbId int, {{.Name}} {{.GoType}}, fromId int64, limit int) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    return {{.DaoPackage}}.Query{{.TableName}}LikeListFromId(dbId, {{.Name}}, fromId, limit)
}
{{- end}}

{{- range .GroupFields}}

func (logic *{{$structName}}MLogic) Query{{.TableName}}GroupList({{.GormField.FieldValue}} {{.GormField.FieldType}}, dbId int, {{.Name}} {{.GoType}}) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    return {{.DaoPackage}}.Query{{.TableName}}GroupList({{- if $hasField}}{{.GormField.FieldValue}}, {{end}}dbId, {{.Name}})
}
{{- end}}
`
