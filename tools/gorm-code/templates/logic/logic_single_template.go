package logic

var logicSingleTemplateStr = `// Code generated by TX.
// Template: Single logic

package {{.LogicPackage}}
{{ if .LogicImports }}
import (
{{- range .LogicImports}}
    {{.}}
{{- end}}
){{end}}
{{$structName := CamelizeStr .TableName .SystemName}}{{$lowerName := LowerLeftWord .TableName}}
{{- $redisCache := .RedisCache}}{{$redisCacheTime := .RedisCacheTime}}
type {{$structName}}SLogic struct {
{{- range $field := .GormFields}}
    {{$field.FieldName}} {{$field.FieldType}}
{{- end}}
    {{.SystemName}}LogicBase
    {{$lowerName}} *{{.TypePackage}}.{{$structName}}
}

func New{{$structName}}SLogic({{- range .GormFields}}{{.FieldValue}} {{.FieldType}}, {{end}}dbId int) *{{$structName}}SLogic {
    return &{{$structName}}SLogic{
{{- range .GormFields}}
        {{.FieldName}}:  {{.FieldValue}},
{{- end}}
        {{.SystemName}}LogicBase: {{.SystemName}}LogicBase{
            DBId:       dbId,
            IsInit:     false,
            UpdateMaps: nil,
        },
    }
}

func (logic *{{$structName}}SLogic) {{$structName}}() *{{.TypePackage}}.{{$structName}} {
    if logic.IsInit == false {
        var err error
{{- if $redisCache }}
        logic.{{$lowerName}}, err = {{.RedisPackage}}.Get{{.TableName}}({{.GormFieldsStr "logic"}})
        if logic.{{$lowerName}} != nil {
            logic.IsInit = true
            _ = {{.RedisPackage}}.Expire{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
            return logic.{{$lowerName}}
        }
{{- end}}
        logic.{{$lowerName}}, err = {{.DaoPackage}}.Query{{.TableName}}({{- range .GormFields}}logic.{{.FieldName}}, {{end}}logic.DBId)        
        if err != nil {
            xl.SErrorf("Query{{.TableName}} Query Error:%s", err.Error())
            return nil
        }
        logic.IsInit = true
{{- if $redisCache }}

        if logic.{{$lowerName}} != nil {
            _ = {{.RedisPackage}}.Set{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
        }
{{- end}}
    }
{{- if $redisCache }}
    if logic.{{$lowerName}} != nil {
        _ = {{.RedisPackage}}.Expire{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
    }
{{- end}}
    return logic.{{$lowerName}}
}

func (logic *{{$structName}}SLogic) OnDestroy() {
    _ = logic.Update{{$structName}}()
    if logic.{{$lowerName}} != nil {
        {{.PoolPackage}}.Put{{$structName}}(logic.{{$lowerName}})
    }
{{- if $redisCache }}
    if logic.{{$lowerName}} != nil {
        _ = {{.RedisPackage}}.Expire{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
    }
{{- end}}
    logic.{{$lowerName}} = nil
}
{{if $redisCache }}
func (logic *{{$structName}}SLogic) CleanRedisInfo() {
    if logic.{{$lowerName}} != nil {
        _ = {{.RedisPackage}}.Del{{.TableName}}(logic.{{$lowerName}})
    }
}{{- end}}

func (logic *{{$structName}}SLogic) Create{{$structName}}({{$lowerName}} *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
    {{$lowerName}}, err := {{.DaoPackage}}.Create{{.TableName}}(logic.DBId, {{$lowerName}})
    if err != nil {
        return nil, err
    }
    {{$lowerName}}.ClearDirtyFlag()

    logic.{{$lowerName}} = {{$lowerName}}
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Set{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
{{- end}}
    return {{$lowerName}}, nil
}

func (logic *{{$structName}}SLogic) Init{{$structName}}({{$lowerName}} *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
    {{$lowerName}}.ClearDirtyFlag()

    logic.{{$lowerName}} = {{$lowerName}}
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Set{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
{{- end}}
    return {{$lowerName}}, nil
}

func (logic *{{$structName}}SLogic) Update{{$structName}}() error {
	if logic.{{$lowerName}} == nil {
		return nil
	}
    if logic.{{$lowerName}}.DirtyFlags > 0 {
        if err := {{.DaoPackage}}.Update{{.TableName}}(logic.DBId, logic.{{$lowerName}}); err != nil {
			xl.SErrorf("Update{{$structName}} Update Error:%s", err.Error())
			return err
		}
		logic.{{$lowerName}}.ClearDirtyFlag()
{{- if $redisCache }}
        _ = {{.RedisPackage}}.Set{{.TableName}}(logic.{{$lowerName}}, {{$redisCacheTime}})
{{- end}}
    }
    if logic.{{$lowerName}}.DirtyFlags < 0 {
        _ = logic.Delete{{$structName}}()
    }
	return nil
}

func (logic *{{$structName}}SLogic) Delete{{$structName}}() error {
	if logic.{{$lowerName}} == nil {
		return nil
	}
    if err := {{.DaoPackage}}.Delete{{.TableName}}(logic.DBId, logic.{{$lowerName}}); err != nil {
        xl.SErrorf("Update{{$structName}} Delete {{$structName}} Error:%s", err.Error())
        return err
    }
{{- if $redisCache }}
    _ = {{.RedisPackage}}.Del{{.TableName}}(logic.{{$lowerName}})
{{- end}}
    {{.PoolPackage}}.Put{{$structName}}(logic.{{$lowerName}})
    logic.{{$lowerName}} = nil
	return nil
}`
