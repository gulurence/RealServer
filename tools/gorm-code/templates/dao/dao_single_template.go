package dao_template

var daoSingleTemplateStr = `// Code generated by TX.
// Template: Single Dao

package {{.DaoPackage}}
{{ if .DaoImports }}
import (
{{- range .DaoImports}}
    {{.}}
{{- end}}
){{end}}

var (
	def{{.TableName}} = &db_types.{{.TableName}}{}
)
{{- $structName := CamelizeStr .TableName .SystemName}}
func Query{{.TableName}}({{.GormFieldsInputs}} ,dbId int) (info *{{.TypePackage}}.{{$structName}}, err error) {
    database := {{.MySqlClient}}
    rows, err := database.Model(def{{.TableName}}).Where(def{{.TableName}}.QueryString({{.GormFieldsValue}})).Rows()
    if err != nil {
        return nil, err
    }
    defer xutil.RowsClose(rows)
        
    if rows.Next() {
        info = {{.PoolPackage}}.Get{{$structName}}()
        err = database.ScanRows(rows, info.Get{{.TableName}}())
    }
    return info, err
}

{{- range .QueryFields}}

func Query{{.TableName}}By{{.QueryKey}}(dbId int, {{.QueryInput}}) (info *{{.TypePackage}}.{{$structName}}, err error) {
    database := {{.MySqlClient}}
    rows, err := database.Model(def{{.TableName}}).Where(def{{.TableName}}.Query{{.QueryKey}}String({{.QueryValue}})).Rows()
    if err != nil {
        return nil, err
    }
    defer xutil.RowsClose(rows)
        
    if rows.Next() {
        info = {{.PoolPackage}}.Get{{$structName}}()
        err = database.ScanRows(rows, info.Get{{.TableName}}())
    }
    return info, err
}

func Query{{.TableName}}By{{.QueryKey}}List(dbId int, {{.QueryInput}}) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    database := {{.MySqlClient}}
    rows, err := database.Model(def{{.TableName}}).Where(def{{.TableName}}.Query{{.QueryKey}}String({{.QueryValue}})).Rows()
    if err != nil {
        return nil, err
    }
    defer xutil.RowsClose(rows)
        
    for rows.Next() {
        info := {{.PoolPackage}}.Get{{$structName}}()
        if err = database.ScanRows(rows, info.Get{{.TableName}}()); err != nil {
            return list, err
        }
        list = append(list, info)
    }
    return list, err
}

{{- end}}

func Create{{.TableName}}(dbId int, info *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
	if tx := {{.MySqlClient}}.Omit(def{{.TableName}}.CreateOmits()...).Create(info.Get{{.TableName}}()); tx.Error != nil {
		return info, tx.Error
	} else if tx.RowsAffected != 1 {
		return info, errors.New("Create{{.TableName}} RowsAffected is Zero")
	}
	return info, nil
}

func Update{{.TableName}}(dbId int, info *{{.TypePackage}}.{{$structName}}) error {
    return {{.MySqlClient}}.Select(info.GetDirtyFlags()){{- if not .OnlyPrimaryKey}}.Where(info.Get{{.TableName}}().WhereString()){{- end}}.UpdateColumns(info.Get{{.TableName}}()).Error
}

func Save{{.TableName}}(dbId int, info *{{.TypePackage}}.{{$structName}}) (*{{.TypePackage}}.{{$structName}}, error) {
    return info, {{.MySqlClient}}.Model(info.Get{{.TableName}}()).Where(info.Get{{.TableName}}().WhereString()).Save(info.Get{{.TableName}}()).Error
}

func Create{{.TableName}}List(dbId int, list []*{{.TypePackage}}.{{$structName}}) error {
	if len(list) <= 0 {
		return nil
	}
    var _list []*db_types.{{.TableName}}
    for _, info := range list {
        _list = append(_list, info.Get{{.TableName}}())
    }
	if tx := {{.MySqlClient}}.Omit(def{{.TableName}}.CreateOmits()...).CreateInBatches(_list, len(_list)); tx.Error != nil {
		return tx.Error
	} else if tx.RowsAffected < int64(len(list)) {
		return errors.New("Create{{.TableName}}List RowsAffected is error" + xutil.NumToString(tx.RowsAffected))
	}
	return nil
}

func Delete{{.TableName}}(dbId int, info *{{.TypePackage}}.{{$structName}}) error {
	if tx := {{.MySqlClient}}{{- if not .OnlyPrimaryKey}}.Where(info.Get{{.TableName}}().WhereString()){{- end}}.Delete(info.Get{{.TableName}}()); tx.Error != nil {
		return tx.Error
	} else if tx.RowsAffected != 1 {
		return errors.New("Delete{{.TableName}} RowsAffected is Error" + xutil.NumToString(tx.RowsAffected))
	}
	return nil
}

{{- range .LikeFields}}

func Query{{.TableName}}LikeList(dbId int, {{.Name}} {{.GoType}}, limit int) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    database := {{.MySqlClient}}
    rows, err := database.Model(def{{.TableName}}).Where(def{{.TableName}}.QueryLikeString({{.Name}})).Limit(limit).Rows()
    if err != nil {
        return nil, err
    }
    defer xutil.RowsClose(rows)

    for rows.Next() {
        info := {{.PoolPackage}}.Get{{$structName}}()
        if err = database.ScanRows(rows, info.Get{{.TableName}}()); err != nil {
            return list, err
        }
        list = append(list, info)
    }
    return list, err
}

func Query{{.TableName}}LikeListFromId(dbId int, {{.Name}} {{.GoType}}, fromId int64, limit int) (list []*{{.TypePackage}}.{{$structName}}, err error) {
    database := {{.MySqlClient}}
    rows, err := database.Model(def{{.TableName}}).Where(def{{.TableName}}.QueryLikeFromId({{.Name}}, fromId)).Limit(limit).Rows()
    if err != nil {
        return nil, err
    }
    defer xutil.RowsClose(rows)
        
    for rows.Next() {
        info := {{.PoolPackage}}.Get{{$structName}}()
        if err = database.ScanRows(rows, info.Get{{.TableName}}()); err != nil {
            return list, err
        }
        list = append(list, info)
    }
    return list, err
}
{{- end}}
`
